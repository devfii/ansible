---
- name: Forward IPv4 and let iptables see bridged traffic
  hosts: k8snodes
  remote_user: ubuntu
  tasks:
  - name: Load modules
    ansible.builtin.shell: |
      cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
      overlay
      br_netfilter
      EOF
  - name: Modprobe overlay
    ansible.builtin.shell: modprobe overlay
  - name: Modprobe br_netfilter
    ansible.builtin.shell: modprobe br_netfilter
  - name: sysctl params required by setup, params persist across reboots
    ansible.builtin.shell: |
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOF
  - name: Set ip_forward to 1
    ansible.builtin.shell: echo '1' > /proc/sys/net/ipv4/ip_forward
  - name: Apply sysctl params without reboot
    ansible.builtin.shell: systemctl --system
- name: Install packages needed to use K8s apt repository
  hosts: k8snodes
  remote_user: ubuntu
  tasks:
  - name: Update OS
    ansible.builtin.apt:
      update_cache: yes
  - name: Install packages
    ansible.builtin.apt:
      name: "{{ item }}"
      state: latest
    with_items:
    - apt-transport-https 
    - ca-certificates 
    - curl
- name: Install Containerd
  hosts: k8snodes
  remote_user: ubuntu
  tasks:
  - name: Download containerd
    ansible.builtin.get_url:
      url: https://github.com/containerd/containerd/releases/download/v1.6.6/containerd-1.6.6-linux-amd64.tar.gz
      dest: /home/ubuntu
  - name: Install containerd
    ansible.builtin.shell: tar Cxzvf /usr/local containerd-1.6.6-linux-amd64.tar.gz
  - name: Create directory for systemd files
    ansible.builtin.file:
      dest: /usr/local/lib/systemd/system
      state: directory
  - name: Copy containerd.service
    ansible.builtin.copy:
      src: ~/ansible/containerd.service
      dest: /usr/local/lib/systemd/system/containerd.service
  - name: Create directory for containerd config
    ansible.builtin.file:
      dest:  /etc/containerd
      state: directory
  - name: Create default containerd config file
    ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  - name: Configure systemd cgroup driver
    ansible.builtin.shell: sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
  - name: Daemon-reload
    ansible.builtin.systemd:
      daemon-reload: yes

  - name: Enable containerd 
    ansible.builtin.systemd:
      enabled: yes
      name: containerd
  - name: Start containerd
    ansible.builtin.systemd:
      state: started
      name: containerd
  - name: Download runc
    ansible.builtin.get_url: 
      url: https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64
      dest: /home/ubuntu
  - name: Install runc
    ansible.builtin.shell: install -m 755 runc.amd64 /usr/local/sbin/runc

  - name: Create folder for CNI executables
    ansible.builtin.file:
      dest: /opt/cni/bin
      state: directory
  - name: Download CNI plugins
    ansible.builtin.get_url:
      dest: /opt/cni/bin
      url: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
  
  - name: Install CNI plugins
    ansible.builtin.shell: tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz
    args:
      chdir: /opt/cni/bin


- name: Download the Google Cloud public signing key
  hosts: k8snodes
  remote_user: ubuntu
  tasks:
  - name: Download the Google Cloud public signing key
    ansible.builtin.shell: curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
  - name: Add the Kubernetes apt repository
    ansible.builtin.shell: echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

- name: Install kubelet, kubeadm
  hosts: k8snodes
  remote_user: ubuntu
  tasks:
  - name: Install kubeadm and kubelet
    ansible.builtin.apt:
      name: "{{ item }}"
      state: latest
    with_items:
      - kubeadm
      - kubelet

  - name: Hold kubeadm and kubelet
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    with_items:
    - kubeadm
    - kubelet
